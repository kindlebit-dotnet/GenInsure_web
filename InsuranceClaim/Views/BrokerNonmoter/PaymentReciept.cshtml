@model InsuranceClaim.Models.NonmoterRecieptModel
@{
    ViewBag.Title = "PaymentReciept";
    Layout = "~/Views/Shared/_InsuranceMain.cshtml";
}

<link href="https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" rel="stylesheet" />

<style>
    .highlight {
        border: 1px solid red;
        animation: blink 1s infinite;
        -webkit-animation: blink 1s infinite;
    }

    .input-group {
        display: flex;
    }

    #txtPolicyNumber {
        flex: 1;
    }

    #searchButton {
        flex: 0;
    }
</style>

<div class="body-content-section">
    <div class="form-section-top">
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 form-section-col">
                    <div class="form-group-section">
                        <div class="form-title">
                            <h4>Receipt Payment</h4>
                        </div>

                        <div class="form-group-input">
                            @using (Html.BeginForm("BrokerReceipt", "BrokerNonmoter", FormMethod.Post, new { @class = "form-horizontal" }))
                            {
                                @Html.HiddenFor(x => x.PolicyId, new { @Id = "hdnPolicyId" })
                                @Html.HiddenFor(x => x.CustomerId, new { @Id = "hdnCustomerId" })
                                @*@Html.HiddenFor(x => x.SummaryDetailId, new { @Id = "hdnSummaryDetailId" })*@

                                if (Model != null && Model.ErrorMsg != null && Model.ErrorMsg != "")
                                {
                                    <div class="alert alert-danger" role="alert">
                                        @Model.ErrorMsg
                                    </div>
                                }

                                <div class="row">
                                    <div class="col-sm-12 col-md-12 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.PolicyNumber, "Search By", new { @class = "gender-label" })
                                            <div class="input-group">
                                                @Html.TextBoxFor(x => x.PolicyNumber, new { @class = "form-control", @autocomplete = "off", @placeholder = "Invoice  No.", @Id = "txtPolicyNumber" })
                                                <div class="input-group-append">
                                                    <button type="button" style=" height: 103%; width: 100%; background-color:red;color:black;border-radius:5px" class="btn btn-outline-secondary" id="searchButton">
                                                        <i class="fas fa-search"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.CustomerName, "Customer Name", new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.CustomerName, new { @class = "form-control", @placeholder = "Customer Name", @Id = "CustomerName", @readonly = "readonly" })
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.PolicyNumber, "Policy No.", new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.PolicyNo, new { @class = "form-control", @placeholder = "Policy No.", @Id = "PolicyNo", @readonly = "readonly" })
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-select">
                              

                                        <div class="form-group">
                                            @Html.LabelFor(x => x.PaymentMethodId, "Payment Method", new { @class = "gender-label" })
                                            @Html.DropDownListFor(x => x.PaymentMethodId, new SelectList(new List<SelectListItem> {
                                                new SelectListItem { Text = "Cash", Value = "1"},
                                                new SelectListItem { Text = "Ecocash", Value = "2"},
                                                new SelectListItem { Text = "Swipe", Value = "3"},
                                                new SelectListItem { Text = "MasterVisa Card", Value = "4"},
                                                new SelectListItem { Text = "Bank Transfer", Value = "5"},
                                            }, "Value", "Text"), "Select Payment Method", new { @class = "form-control", @id = "Paymentmethodid" })
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.AmountDue, "Amount Due", new { @class = "gender-label" })
                                            <div class="row row-0">
                                                <div class="col-xs-9 col-sm-9 plr-0">
                                                    @Html.TextBoxFor(x => x.AmountDue, new { @class = "form-control", @placeholder = "Amount Due", @Id = "AmountDue", @readonly = "readonly" })
                                                </div>
                                                <div class="col-xs-3 col-sm-3 plr-0 form-group-select">
                                                    @Html.TextBoxFor(x => x.Currency, new { @class = "form-control", @placeholder = "Currency", @Id = "CurrencyId", @readonly = "readonly" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.TenderedAmount, "Tendered Amount", new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.TenderedAmount, new { @class = "form-control", @placeholder = "Tendered Amount", @Id = "ReceiptAmount" })
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.Balance, "Balance", new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.Balance, new { @class = "form-control", @placeholder = "Balance", @Id = "Balance", @readonly = "readonly" })
                                        </div>
                                    </div>

                                    <div class="col-sm-6 col-md-4 form-group-text">
                                        <div class="form-group">
                                            @Html.LabelFor(x => x.TransactionReference, "Transaction Reference", new { @class = "gender-label" })
                                            @Html.TextBoxFor(x => x.TransactionReference, new { @class = "form-control", @placeholder = "Transaction Reference", @Id = "TransactionReference" })
                                        </div>
                                        @Html.HiddenFor(x=>x.CustomerId, new { @Id = "CustomerId" })
                                    </div>
                                </div>

                                <div class="text-left">
                                    <button type="submit" id="btnSubmit"  name="Submit" class="btn btn-success">SUBMIT</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>
<script src="https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>

<script>
    $(document).ready(function () {
       
        chkPolicyNumber();
        clear();

        function chkPolicyNumber() {
            var policyNumbr = $('#txtPolicyNumber').val();
            if (policyNumbr != "") {
                $('#btnSubmit').prop('disabled', false);
            } else {
                $('#btnSubmit').prop('disabled', true);
            }
        }

        $("#btnCancel").click(function () {
            var policyNumbr = $('#txtPolicyNumber').val();
            $.ajax({
                url: "@Url.Action("PolicyStatusUpdate", "CustomerRegistration")",
                type: "GET",
                dataType: "json",
                contentType: "Application/Json; charset:utf-8",
                data: { PolicyNo: policyNumbr },
                success: function () {
                    alert("Status has been Changed To Cancelled");
                },
                error: function () {
                    alert("Something has gone wrong!!");
                }
            })
        })

        function clear() {
            $('#txtPolicyNumber').val('');
            $('#PolicyNo').val('');
            $('#AmountDue').val('');
            $('#Balance').val('');
        }

        var policyNumbersArray = [];

        getPolicyNumbers();

        function getPolicyNumbers() {
       
            $.ajax({
                url: "@Url.Action("GetAutoSuggestions", "CustomerRegistration")",
                type: "POST",
                async: false,
                dataType: "json",
                success: function (data) {
                    for (var i = 0; i < data.length; i++) {
                        policyNumbersArray.push(data[i].PolicyNumber + "," + data[i].CustomerName);
                    }
                }
            })
        };

        $("#txtPolicyNumber").autocomplete({
            source: policyNumbersArray
        });

        function fetchData() {
            chkPolicyNumber();

            if ($("#txtPolicyNumber").val() != "") {
                $.ajax({
                    url: "@Url.Action("GetCustomername", "BrokerNonmoter")",
                    async: false,
                    data: { txtvalue: $("#txtPolicyNumber").val() },
                    success: function (data) {
                        $("#CustomerName").val(data.CustomerName);
                        $("#ReceiptNo").val(data.Id);
                        $("#PolicyNumber").val(data.PolicyNumber);
                        $('#PolicyNo').val(data.PolicyNumber);
                        $("#InvoiceNumber").val(data.InvoiceNumber);
                        $("#AmountDue").val(data.AmountDue);
                        $('#hdnPolicyId').val(data.PolicyNumber);
                        $('#hdnCustomerId').val(data.CustomerId);
                        $('#PaymentMethodId').val(data.PaymentMethodId);
                        $('#hdnSummaryDetailId').val(data.SummaryDetailId);
                        $('#CurrencyId').val(data.Currency);
                        $('#CustomerId').val(data.CustomerId);
                    },
                    error: function (error) {
                        alert("Error fetching data.");
                    }
                });
            }
        }

        $("#txtPolicyNumber").blur(function () {
            fetchData();
        });

        $("#searchButton").click(function () {
            fetchData();
        });

        $("#ReceiptAmount").keyup(function () {
            var Balance = 0;
            var receiptAmount = $(this).val();
            var amountDue = $('#AmountDue').val();
            Balance = ((amountDue) - (receiptAmount)).toFixed(2);
            $('#Balance').val(Balance);
        });

        function getCurrentDate() {
            var d = new Date();
            var month = d.getMonth() + 1;
            var day = d.getDate();

            var output = d.getFullYear() + '/' +
                (month < 10 ? '0' : '') + month + '/' +
                (day < 10 ? '0' : '') + day;
            return output;
        }

    });

    window.addEventListener("pageshow", function (event) {
        debugger
        var historyTraversal = event.persisted ||
            (typeof window.performance != "undefined" &&
                window.performance.navigation.type === 2);
        if (historyTraversal) {
      
            $('#txtPolicyNumber').val('');
            $('#CustomerName').val('');
            $('#PolicyNo').val('');
            $('#ReceiptAmount').val('');
        }
    });


</script>

