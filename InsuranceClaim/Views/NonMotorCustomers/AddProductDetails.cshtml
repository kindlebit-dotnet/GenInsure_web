@model InsuranceClaim.Models.BrokerCustomersModel
@{
    ViewBag.Title = "AddProductDetails";
    Layout = "~/Views/Shared/_InsuranceMain.cshtml";
    var sessionId = Session["Number"] != null ? Session["Number"].ToString() : "";
    var sucess = Session["SucessMsg"] != null ? Session["SucessMsg"].ToString() : "";
    var CUSTOMERID = Session["CustomerId"] != null ? Session["CustomerId"] : "";
    var modalId = Session["_CustomerId"] != null ? Session["_CustomerId"] : "";
}

@*@if (sucess != null)
    {
        <script type="text/javascript">
                    alert("@sucess");
        </script>
    }*@

<style>
    .user-list-box table tbody tr td {
        vertical-align: middle;
        background: #fff;
    }

    .user-list-box {
        margin-top: 30px;
        border: 1px solid #ccc;
    }

    .user-list-section {
        padding: 0 30px;
    }

    .user-list-box table {
        margin-bottom: 0;
    }

        .user-list-box table tbody tr:nth-child(2n) td {
            background: #e3e3e3;
        }

    .reqError {
        color: #ff0000; /*Red Color*/
        font-weight: bold;
    }
</style>

<div class="body-content-section">
    <div class="form-section-top">
        <div class="container">
            <div class="row bs-wizard">
                <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                    <div class="Process-step-section  process-block">
                        <div class="col-sm-12 bs-wizard-step active">
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Customer Details</div>
                        </div>
                        <div class="col-sm-12 bs-wizard-step active">
                            <!-- complete -->
                            <div class="progress"><div class="progress-bar"></div></div>
                            <a href="#" class="bs-wizard-dot"></a>
                            <div class="text-center bs-wizard-stepnum">Product Details</div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10 form-section-col">
                    @*< div class = "form-group-section">*@
                    <div class="form-title">
                        <h3>Add Product</h3>
                    </div>
                    <input type="hidden" id="edit-id" value="">
                    <div class="form-group-input">
                        @*@using (Ajax.BeginForm("SaveCustomerData", "CustomerRegistration", new AjaxOptions { UpdateTargetId = "CustomerResult", OnSuccess = "GoToProductDetail" }))*@
                        @using (Html.BeginForm("AddProductDetails", "NonMotorCustomers", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "user-form", @onsubmit = "return checkReqFields()" }))
                        {
                            @Html.HiddenFor(x => x.Id)

                            <div class="row">
                                <div class="col-sm-6 col-md-6 form-group-select">
                                    <div class="form-group">
                                        @Html.Label("Policy Class Name", new { @class = "gender-label" })
                                        @Html.DropDownListFor(x => x.InsorancePolicyId, new SelectList(ViewBag.policyClasses, "Id", "PolicyClassName"), "Select Policy Class ", new { @class = "form-control", @id = "PolicyClassName", @required = true })
                                        @Html.ValidationMessageFor(x => x.InsorancePolicyId, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="col-sm-6 col-md-6 form-group-text form-group-select">
                                    <div class="form-group">
                                        @Html.Label("Risk Cover Name", new { @class = "gender-label" })
                                        @Html.DropDownListFor(x => x.RiskcoverId, new SelectList("", "Id", "RskCoverName"), "Select Risk Cover ", new { @class = "form-control", @id = "RskCoverName", @required = true })
                                        @Html.ValidationMessageFor(x => x.RiskcoverId, "", new { @class = "text-danger" })

                                    </div>
                                </div>


                            </div>

                            <div class="row">
                                <div class="col-sm-6 col-md-6 form-group-select">
                                    <div class="form-group">
                                        @Html.Label("Risk Item", new { @class = "gender-label" })
                                        @Html.DropDownListFor(x => x.RiskItemId, new SelectList("", "Id", "RiskItemName"), "Select Risk Items ", new { @class = "form-control", @id = "RiskItems", @required = true })
                                        @Html.ValidationMessageFor(x => x.RiskItemId, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Description of Risk Insured", new { @class = "gender-label" })
                                        @Html.TextBoxFor(x => x.RiskDescription, new { @class = "form-control", @name = "DescriptionofRiskInsured", @autocomplete = "off", @id = "DescriptionofRiskInsured", @placeholder = "Description of Risk Insured", @required = true })
                                        @Html.ValidationMessageFor(x => x.RiskDescription, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Address of Risk", new { @class = "gender-label" })
                                        @Html.TextBoxFor(x => x.RiskAddress, new { @class = "form-control", @name = "RiskAddress", @autocomplete = "off", @id = "RiskAddress", @placeholder = "Address of Risk", @required = true })
                                        @Html.ValidationMessageFor(x => x.RiskAddress, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Cover Start Date", new { @class = "gender-label" })
                                        <div class="form-group-label">

                                            <div class='input-group' id='datetimepicker1'>
                                                @Html.TextBoxFor(X => X.PolicyValidityPeriodFrom, new { @class = "form-control", @autocomplete = "off", @placeholder = "PolicyValidityPeriod From ", @id = "PolicyValidityPeriodFrom", @required = true })
                                                <span class="input-group-addon">
                                                    <span class="glyphicon glyphicon-calendar"></span>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.PolicyValidityPeriodFrom, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Cover End Date", new { @class = "gender-label" })
                                        <div class="form-group-label">

                                            <div class='input-group' id='datetimepicker2'>
                                                @Html.TextBoxFor(x => x.PolicyValidityPeriodTo, new { @class = "form-control", @autocomplete = "off", @placeholder = "PolicyValidityPeriod To", @id = "PolicyValidityPeriodTo", @required = true })
                                                <span class="input-group-addon">
                                                    <span class="glyphicon glyphicon-calendar" id="dateid"></span>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.PolicyValidityPeriodTo, "", new { @class = "text-danger" })

                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 form-group-select selectcurrency">
                                    <div class="form-group">
                                        @Html.Label("Currency", new { @class = "gender-label" })
                                        @Html.DropDownList("FooBarDropDown", new List<SelectListItem>
                        {
                             new SelectListItem{ Text="Select Currency", Value = "0" },
                             new SelectListItem{ Text="ZiG", Value = "ZiG" },
                             new SelectListItem{ Text="USD", Value = "USD" },

                                   }, new { @class = "form-control", @id = "Currency", @required = true })
                                        @Html.ValidationMessageFor(x => x.Currency, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                               
                            </div>


                            <div class="row">
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Sum Insured", new { @class = "gender-label" })
                                        @Html.TextBoxFor(x => x.SumInsured, new { @type = "number", @class = "form-control", @name = "SumInsured", @autocomplete = "off", @id = "SumInsured", @placeholder = "Sum Insured", @required = true })
                                        @Html.ValidationMessageFor(x => x.SumInsured, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Risk Rate (%)", new { @class = "gender-label" })
                                        @Html.TextBoxFor(x => x.RiskRate, new { @type = "number", @class = "form-control", @name = "RiskRate", @autocomplete = "off", @id = "RiskRate", @placeholder = "Risk Rated", @required = true })
                                        @Html.ValidationMessageFor(x => x.RiskRate, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6 col-md-6 form-group-select">
                                    <div class="form-group">
                                        @Html.Label("Payment Term", new { @class = "gender-label" })
                                        @Html.DropDownList("PaymentTerm", new List<SelectListItem>
                        {

                             new SelectListItem{ Text="Select Payment Term", Value = "0" },
                             new SelectListItem{ Text="Annual", Value = "Annual" },
                             new SelectListItem{ Text="Quarterly", Value = "Quarterly" },

                             new SelectListItem{ Text="Termly", Value = "Termly" },
                             new SelectListItem{ Text="Monthly", Value = "Monthly" },

                                   }, new { @class = "form-control", @id = "PaymentTerm", @required = true })
                                       
                                    </div>
                                </div>
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Stamp Duty", new { @class = "gender-label" })
                                        @Html.TextBoxFor(x => x.StampDuty, new { @class = "form-control", @name = "StampDuty", @autocomplete = "off", @id = "StampDuty", @placeholder = "Stamp Duty", @required = true, @readonly = "readonly" })
                                        @Html.ValidationMessageFor(x => x.StampDuty, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6 col-md-6 form-group-text">
                                    <div class="form-group">
                                        @Html.Label("Total Premium Payable", new { @class = "gender-label" })
                                        @Html.TextBoxFor(x => x.TotalPremiumPayable, new { @class = "form-control", @name = "TotalPremiumPayable", @autocomplete = "off", @id = "TotalPremiumPayable", @placeholder = "TotalPremiumPayable", @required = true, @readonly = "readonly" })
                                        @Html.ValidationMessageFor(x => x.TotalPremiumPayable, "", new { @class = "text-danger" })

                                    </div>
                                </div>
                                <div class="col-sm-6 col-md-6 form-group-text">


                                </div>
                            </div>
                            <div class="text-left next-btn">
                                <button type="submit" id="btnadd">Add New Product</button>
                                <button type="submit" id="btnupdate" style="display:none">Update Product</button>
                                <button type="submit" id="cancel-edit" style="display:none">Cancel</button>

                                @*<button type="button" class="btn" onclick="window.location.href='@Url.Action("ProductList","Product")'">Cancel</button>*@
                            </div>
                        }

                    </div>
                </div>
            </div>

        </div>

        <div class="user-list-section">
            <div class="container-fluid">
                <div id="user-list" class="user-list-box">
                    <table class="table">
                        <thead style="display:none" class="Policylistheader">
                            <tr>
                                <th>Policy Class</th>
                                <th>RiskCover</th>
                                <th>RiskItems</th>
                                <th>Description</th>
                                <th>RiskAddress</th>
                                <th>From Date</th>
                                <th>To Date</th>
                                <th>Currency</th>
                                <th>Sum Insured</th>
                                <th>Risk Rate</th>
                                <th>Payment Term</th>
                                <th>Stamp Duty</th>
                                <th>Total Premium Payable</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>

                </div>
            </div>
        </div>


        <div class="container-fluid" style="padding:0 30px">
            <div class="next-btn text-right">
                <button type="button" id="AddId" class="classSubmit btn" style="display:none;">Save Details</button>
            </div>
        </div>

    </div>
</div>



@*Modal*@
<div class="modal fade" id="getCodeModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel"> Are you sure you want to Generate Quotation? </h4>
            </div>
            <div class="modal-body" id="getCode" style="overflow-x: scroll;">
                <a href="@Url.Action("GenerateQuotation", "NonMotorCustomers", new { id="" }, protocol: Request.Url.Scheme)" class="btn btn-primary generatequotation">Generate Quotation</a>
                <a href="@Url.Action("ViewCustomer", "NonMotorCustomers", new { Id = 2026 }, protocol: Request.Url.Scheme)" class="btn btn-primary">Cancel</a>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js"></script>

<script>
 $('#PolicyClassName').change(function () {
       
        var selectedValue = $(this).val();
        if (selectedValue) {
            populateSecondDropdown(selectedValue);
        } else {
            $('#RskCoverName').empty();
        }
    });


    function populateSecondDropdown(selectedValue) {
    
        $.ajax({
            url: '@Url.Action("GetRiskCover", "NonMotorCustomers")',
            type: 'GET',
            data: { selectedValue: selectedValue },
            dataType: 'json',
            success: function (data) {
              
                RiskCoverDropdown(data);
            },
            error: function (xhr, status, error) {
               
                console.error(xhr.statusText);
            }
        });
    }


    function RiskCoverDropdown(options) {
       
        var secondDropdown = $('#RskCoverName');
        secondDropdown.empty();
        secondDropdown.append($('<option></option>').val('').text('Select Option'));
        $.each(options, function (index, getoption) {

            var optionhtml = '<option value="' + getoption.Id + '">' + getoption.Rskcover + '</option>';
            secondDropdown.append(optionhtml);
        });
    }



    $('#RskCoverName').change(function () {
       
        var selectedValue = $(this).val();
        if (selectedValue) {
            RiskItemDropdown(selectedValue);
        } else {
            $('#RiskItems').empty();
        }
    });



     function RiskItemDropdown(selectedValue) {
  
        $.ajax({
            url: '@Url.Action("GetRiskItems", "NonMotorCustomers")',
            type: 'GET',
            data: { selectedValue: selectedValue },
            dataType: 'json',
            success: function (data) {
             
                RiskItem(data);
            },
            error: function (xhr, status, error) {
            
                console.error(xhr.statusText);
            }
        });
    }

    function RiskItem(options) {
     
        var thirdDropdown = $('#RiskItems');
        thirdDropdown.empty();
        thirdDropdown.append($('<option></option>').val('').text('Select Option'));
        $.each(options, function (index, Getoption) {
        
            var optionhtml = '<option value="' + Getoption.Id + '">' + Getoption.RiskItemName + '</option>';
            thirdDropdown.append(optionhtml);
        });
    }

    document.getElementById("SumInsured").addEventListener("input", clearPaymentTerm);
    document.getElementById("RiskRate").addEventListener("input", clearPaymentTerm);

    function clearPaymentTerm() {
        // Get the Payment Term dropdown
     
        var paymentTermDropdown = document.getElementById("PaymentTerm");

        // Unselect the currently selected option (set it to the default value)
        paymentTermDropdown.value = "0";
        document.getElementById("StampDuty").value = "";
        document.getElementById("TotalPremiumPayable").value = "";
    }

    $(document).ready(function () {

        $.validator.addMethod("dropdownRequired", function (value, element) {
            return value != "0"; // Change "0" to the value of the default option in your dropdown.
        }, "Please select a payment term.");

        // Apply the custom rule to the dropdown element
        $("#PaymentTerm").rules("add", {
            dropdownRequired: true
        });


        //$('#datetimepicker1 input').datepicker({
        //    dateFormat: 'yy-mm-dd',
        //    minDate: new Date(),
        //    onSelect: function (dateText, inst) {
        //        var selectedDate = new Date(dateText);
            
        //        $('#datetimepicker2 input').datepicker('option', 'minDate', selectedDate);

        //        var nextDay = new Date(selectedDate);
        //        nextDay.setDate(selectedDate.getDate() + 1);
        //        $('#datetimepicker2 input').datepicker('setDate', nextDay);
        //    }
        //});

        $('#datetimepicker1 input').datepicker({
           
            dateFormat: 'yy-mm-dd',
            minDate: new Date(),
            onSelect: function (dateText, inst) {
                debugger
                var selectedDate = new Date(dateText);
         
                var toDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, selectedDate.getDate());
               
                $('#datetimepicker2 input').datepicker('option', 'minDate', toDate);

                $('#datetimepicker2 input').datepicker('setDate', toDate);
            }
        });


        // Initialize the second datepicker
        $('#datetimepicker2 input').datepicker({
            dateFormat: 'yy-mm-dd',
            minDate: 0
        });


        //$("#PolicyValidityPeriodFrom, #PolicyValidityPeriodTo").change(function () {
        //    debugger
       
        //    var fromDate = new Date($("#PolicyValidityPeriodFrom").val());
        //    var toDate = new Date($("#PolicyValidityPeriodTo").val());
      
        //    if (fromDate >= toDate) {
        //        /* alert("Policy Validity Period To must be greater than Policy Validity Period From.");*/
        //        $("#PolicyValidityPeriodTo").val("");
        //    }
        //});
      
      
      
        //$("#PolicyValidityPeriodFrom").change(function () {
        //    debugger
        //    var fromDate = new Date($(this).val());
        //    var toDate = new Date(fromDate.getFullYear(), fromDate.getMonth() + 1, 0); // Set toDate to the last day of the next month
      
        //    // Check if the toDate is exactly one month after fromDate
        //    if (toDate.getTime() === fromDate.getTime()) {
        //        // If it is, update the toDate field
        //        $("#PolicyValidityPeriodTo").val(toDate.toISOString().slice(0, 10));
        //    } else {
        //        // If it's not, reset the toDate field
        //        $("#PolicyValidityPeriodTo").val("");
        //    }
        //});

             


        $("#Id").val(@CUSTOMERID);
        //$("#CountryCode").select2();


        $('#RiskRate').mask('99.99');

        $('#PaymentTerm').change(function () {
         
            var Sumninsured = $('#SumInsured').val();
            var risk = $('#RiskRate').val();
            var riskrate = risk / 100;
            var selectedValue = $(this).val();
            if (selectedValue == "Annual") {
                var Basicpremium = Sumninsured * riskrate;
            }
            else if (selectedValue == "Termly") {
                var Basicpremium = (parseFloat(Sumninsured * riskrate) / 3);
            }
            else if (selectedValue == "Quarterly") {
                var Basicpremium = (parseFloat(Sumninsured * riskrate) / 4);
            }
            else if (selectedValue == "Monthly") {
                var Basicpremium = (parseFloat(Sumninsured * riskrate) / 12);
            }
            var stmpduty = 0.05 * Basicpremium;
            var totalpayable = Basicpremium;
            var totalpyable = Basicpremium + stmpduty;
            $('#StampDuty').val(stmpduty.toFixed(2));
            $('#TotalPremiumPayable').val(totalpyable.toFixed(2));
        });

    });


    $('#btnadd').click(function () {
        debugger
        var returnValue;

        var selectedValue = $('#PaymentTerm').val();
        if (selectedValue != 0) {
            $('#PaymentTerm option').prop('disabled', true); // Disable all options
            $('#PaymentTerm option[value="0"]').prop('disabled', false); // Enable "Select Payment Term"
            $('#PaymentTerm option[value="' + selectedValue + '"]').prop('disabled', false); // Enable selected option
        }
        
        var name = document.getElementById("PolicyClassName").value;
        var address = document.getElementById("RskCoverName").value;
        var RiskItems = document.getElementById("RiskItems").value;
        var DescriptionofRiskInsured = document.getElementById("DescriptionofRiskInsured").value; 
        var RiskAddress = document.getElementById("RiskAddress").value;
        var PolicyValidityPeriodFrom = document.getElementById("PolicyValidityPeriodFrom").value;
        var SumInsured = document.getElementById("SumInsured").value;
        var RiskRate = document.getElementById("RiskRate").value;
        var currencyElement = $('#Currency').val();
       
     

        returnValue = true;
        if (name.trim() == "") {
            document.getElementById("reqTxtPolicyId").innerHTML = "* Name is required.";
            returnValue = false;
        }
        if (address.trim() == "") {
            document.getElementById("reqTxtAddress").innerHTML = "* Address is required.";
            returnValue = false;
        }
        if (RiskItems.trim() == "") {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Item is required.";
            returnValue = false;
        }

        if (DescriptionofRiskInsured.trim() == "") {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }
        if (RiskAddress.trim() == "") {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }

        if (PolicyValidityPeriodFrom.trim() == "") {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }

        if (currencyElement.trim() == 0) {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }
        if (SumInsured.trim() == 0) {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }

        if (RiskRate.trim() == 0) {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }

        if (selectedValue.trim() == 0) {
            document.getElementById("reqTxtAddress").innerHTML = "* Risk Description is required.";
            returnValue = false;
        }


        return returnValue;
    });

    function PolicyDate() {
  
       
    }


    $(document).ready(function () {
        PolicyDate();
    let PolicyProductList = [];
        $('#btnadd, #btnupdate').click(function (e) {
        
            e.preventDefault();
           var userId = $('#edit-id').val();
           var PolicyClassName = $('#PolicyClassName').val();
           var RskCoverName = $('#RskCoverName').val();
           var RiskItems = $('#RiskItems').val();
           var DescriptionofRiskInsured = $('#DescriptionofRiskInsured').val();
           var RiskAddress = $('#RiskAddress').val();
           var PolicyValidityPeriodFrom = $('#PolicyValidityPeriodFrom').val();
           var PolicyValidityPeriodTo = $('#PolicyValidityPeriodTo').val();
           var Currency = $('#Currency').val();
           var SelectedCurrency = $('#Currency').val();
           var SumInsured = $('#SumInsured').val();

           var RiskRate = $('#RiskRate').val();
           var PaymentTerm = $('#PaymentTerm').val();
           var StampDuty = $('#StampDuty').val();
            var TotalPremiumPayable = $('#TotalPremiumPayable').val();

            if (userId) {
               
                updateUser(userId, PolicyClassName, RskCoverName, RiskItems, DescriptionofRiskInsured, RiskAddress, PolicyValidityPeriodFrom, PolicyValidityPeriodTo, Currency, SumInsured, RiskRate, PaymentTerm, StampDuty,TotalPremiumPayable);
                $('#btnadd').show();
                $('#btnupdate').hide();
                $('#cancel-edit').hide();
                $('#edit-id').val('');
            } else {
                createUser(PolicyClassName, RskCoverName, RiskItems, DescriptionofRiskInsured, RiskAddress, PolicyValidityPeriodFrom, PolicyValidityPeriodTo, Currency, SumInsured, RiskRate, PaymentTerm, StampDuty, TotalPremiumPayable);

            }        
            $('#user-form')[0].reset();
            $('#Currency').val(SelectedCurrency);
            $('#Currency').attr('disabled', 'disabled');
            PolicyDate();

        });

        // cancel update product click
        $('#cancel-edit').click(function () {
            $('#user-form')[0].reset();
            $('#btnadd').show();
            $('#btnupdate').hide();
            $('#cancel-edit').hide();
            $('#edit-id').val('')
        });


        function createUser(PolicyClassName, RskCoverName, RiskItems, DescriptionofRiskInsured, RiskAddress, PolicyValidityPeriodFrom, PolicyValidityPeriodTo, Currency, SumInsured, RiskRate, PaymentTerm, StampDuty, TotalPremiumPayable) {
           
            const newUser = {
                id: PolicyProductList.length + 1,
                PolicyClassName: PolicyClassName,
                RskCoverName: RskCoverName,
                RiskItems: RiskItems,
                DescriptionofRiskInsured: DescriptionofRiskInsured,
                RiskAddress: RiskAddress,
                PolicyValidityPeriodFrom: PolicyValidityPeriodFrom,
                PolicyValidityPeriodTo: PolicyValidityPeriodTo,
                Currency: Currency,
                SumInsured: SumInsured,
                RiskRate: RiskRate,
                PaymentTerm: PaymentTerm,
                StampDuty: StampDuty,
                TotalPremiumPayable: TotalPremiumPayable,
            };
            PolicyProductList.push(newUser);
            displayPolicyProductList();
        }

        function updateUser(userId, PolicyClassName, RskCoverName, RiskItems, DescriptionofRiskInsured, RiskAddress, PolicyValidityPeriodFrom, PolicyValidityPeriodTo, Currency, SumInsured, RiskRate, PaymentTerm, StampDuty, TotalPremiumPayable) {
           
            const userToUpdate = PolicyProductList.find((u) => u.id == userId);
            if (userToUpdate) {
                userToUpdate.PolicyClassName = PolicyClassName;
                userToUpdate.RskCoverName = RskCoverName;
                userToUpdate.RiskItems = RiskItems;
                userToUpdate.DescriptionofRiskInsured = DescriptionofRiskInsured;
                userToUpdate.RiskAddress = RiskAddress;
                userToUpdate.PolicyValidityPeriodFrom = PolicyValidityPeriodFrom;
                userToUpdate.PolicyValidityPeriodTo = PolicyValidityPeriodTo;
                userToUpdate.Currency = Currency;
                userToUpdate.SumInsured = SumInsured;
                userToUpdate.RiskRate = RiskRate;
                userToUpdate.PaymentTerm = PaymentTerm;
                userToUpdate.StampDuty = StampDuty;
                userToUpdate.TotalPremiumPayable = TotalPremiumPayable;

            }


            displayPolicyProductList();
        }

        function displayPolicyProductList() {
         
            const userList = $('#user-list table tbody ');
            userList.empty();
            PolicyProductList.forEach((user) => {
                const listItem = `<tr><td>${user.PolicyClassName}</td><td>${user.RskCoverName}</td><td>${user.RiskItems}</td><td>${user.DescriptionofRiskInsured}</td><td>${user.RiskAddress}</td><td>${user.PolicyValidityPeriodFrom}</td><td>${user.PolicyValidityPeriodTo}</td><td>${user.Currency}</td><td>${user.SumInsured}</td><td>${user.RiskRate}</td><td>${user.PaymentTerm}</td><td> ${user.StampDuty}</td><td>${user.TotalPremiumPayable}</td><td class="text-right"><button class="edit-button btn-sm btn btn-primary" data-id="${user.id}"><i class="fa fa-pencil" aria-hidden="true"></i></button>  <button class="delete-button btn-sm btn btn-danger" data-id="${user.id}"><i class="fa fa-trash" aria-hidden="true"></i></button></td></tr>`;
                userList.append(listItem);

                if ($("tbody tr").length > 0) {
                    $('.Policylistheader').css("display", "table-header-group")
                    $('.classSubmit').css("display", "table-header-group")


                }
            });

            //edit button click function
            $('.edit-button').click(function () {
         
                const userId = $(this).data('id');
                const userToEdit = PolicyProductList.find((u) => u.id == userId);
                if (userToEdit) {
                    $('#edit-id').val(userToEdit.id);
                    $('#PolicyClassName').val(userToEdit.PolicyClassName);
                    $('#RskCoverName').val(userToEdit.RskCoverName);
                    $('#RiskItems').val(userToEdit.RiskItems);
                    $('#DescriptionofRiskInsured').val(userToEdit.DescriptionofRiskInsured);
                    $('#RiskAddress').val(userToEdit.RiskAddress);
                    $('#PolicyValidityPeriodFrom').val(userToEdit.PolicyValidityPeriodFrom);
                    $('#PolicyValidityPeriodTo').val(userToEdit.PolicyValidityPeriodTo);
                    $('#Currency').val(userToEdit.Currency);
                    $('#SumInsured').val(userToEdit.SumInsured);
                    $('#RiskRate').val(userToEdit.RiskRate);
                    $('#StampDuty').val(userToEdit.StampDuty);
                    $('#PaymentTerm').val(userToEdit.PaymentTerm);
                    $('#TotalPremiumPayable').val(userToEdit.TotalPremiumPayable);

                    $('#btnadd').hide();
                    $('#btnupdate').show();
                    $('#cancel-edit').show();
                }
            });
       

            $('.delete-button').click(function () {
                const userId = $(this).data('id');
                const userIndex = PolicyProductList.findIndex((u) => u.id == userId);
                if (userIndex !== -1) {
                    PolicyProductList.splice(userIndex, 1);
                    displayPolicyProductList();
                }
                if ($("tbody tr").length<1) {
                    $('.Policylistheader').css("display", "none")
                    $('.classSubmit').css("display", "none")
                }
            });
        }

        const model = {
            UserId: "10",
            PolicyProductList: PolicyProductList,

        };

        $('#AddId').click(function () {

            $.ajax({
                url: '/NonMotorCustomers/AddProductDetails',
                type: 'POST',

                contentType: 'application/json',
                data: JSON.stringify(model),
                success: function (data) {
                
                   /* $(".generatequotation").attr("href", $(".generatequotation").attr("href") + "/" + data);*/
                    $(".generatequotation").attr("id", data)
                    $('.classSubmit').css("display", "none")
                    $('#user-list table tbody ').empty();
                    $('.Policylistheader').css("display", "none")
                    Policyschedule(data);
                    PolicyProductList.empty();
                    //var url = '/NonMotorCustomers/PolicySchedule/' + data;
                    //window.location.href = url;
                   /* $("#getCodeModal").modal('show');*/
                },
                error: function (error) {
                    console.error('Error:', error);
                }
            });
        });

        function Policyschedule(data) {
            var id = data;
          
            $.ajax({
                url: '/NonMotorCustomers/PolicySchedule/',
                type: 'GET',
                contentType: 'application/json',
                data: { id: id },
                success: function (data) {
                   
                   window.location.href = '@Url.Action("GenerateQuotation", "NonMotorCustomers")/'+ id;
                },
                error: function (error) {
                    console.error('Error:', error);
                }
            });

        }
    });



    //$("#datetimepicker1").change(function () {
    //    debugger
    //    var fromDate = new Date($(this).val());
    //    var toDate = new Date(fromDate.getFullYear(), fromDate.getMonth() + 1, 0); // Set toDate to the last day of the next month

    //    // Check if the toDate is exactly one month after fromDate
    //    if (toDate.getTime() === fromDate.getTime()) {
    //        // If it is, update the toDate field
    //        $("#PolicyValidityPeriodTo").val(toDate.toISOString().slice(0, 10));
    //    } else {
    //        // If it's not, reset the toDate field
    //        $("#PolicyValidityPeriodTo").val("");
    //    }
    //});

</script>





